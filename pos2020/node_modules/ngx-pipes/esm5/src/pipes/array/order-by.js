import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isString, isUndefined } from '../helpers/helpers';
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    OrderByPipe_1 = OrderByPipe;
    OrderByPipe.prototype.transform = function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        var out = tslib_1.__spread(input);
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort(function (a, b) {
                var l = config.length;
                for (var i = 0; i < l; ++i) {
                    var _a = tslib_1.__read(OrderByPipe_1.extractFromConfig(config[i]), 2), prop = _a[0], asc = _a[1];
                    var pos = OrderByPipe_1.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = tslib_1.__read(OrderByPipe_1.extractFromConfig(config), 3), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+':
                        return out.sort(OrderByPipe_1.simpleSort.bind(this));
                    case '-':
                        return out.sort(OrderByPipe_1.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe_1.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe_1.simpleSort.bind(this));
    };
    OrderByPipe.simpleSort = function (a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    };
    OrderByPipe.orderCompare = function (prop, asc, a, b) {
        var first = extractDeepPropertyByMapKey(a, prop);
        var second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            var pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    };
    OrderByPipe.extractFromConfig = function (config) {
        var sign = config.substr(0, 1);
        var prop = config.replace(/^[-+]/, '');
        var asc = sign !== '-';
        return [prop, asc, sign];
    };
    var OrderByPipe_1;
    OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
        Pipe({ name: 'orderBy' })
    ], OrderByPipe);
    return OrderByPipe;
}());
export { OrderByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcGlwZXMvIiwic291cmNlcyI6WyJzcmMvcGlwZXMvYXJyYXkvb3JkZXItYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHeEY7SUFBQTtJQW9GQSxDQUFDO29CQXBGWSxXQUFXO0lBSXRCLCtCQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBWTtRQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBTSxHQUFHLG9CQUFPLEtBQUssQ0FBQyxDQUFDO1FBRXZCLDhCQUE4QjtRQUM5QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLElBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQ3BCLElBQUEsa0VBQXNELEVBQXJELFlBQUksRUFBRSxXQUErQyxDQUFDO29CQUM3RCxJQUFNLEdBQUcsR0FBRyxhQUFXLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7d0JBQ2IsT0FBTyxHQUFHLENBQUM7cUJBQ1o7aUJBQ0Y7Z0JBRUQsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsa0NBQWtD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RHZCLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQztPQUNiLFdBQVcsQ0FvRnZCO0lBQUQsa0JBQUM7Q0FBQSxBQXBGRCxJQW9GQztTQXBGWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5LCBpc1N0cmluZywgaXNVbmRlZmluZWQgfSBmcm9tICcuLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG5AUGlwZSh7IG5hbWU6ICdvcmRlckJ5JyB9KVxuZXhwb3J0IGNsYXNzIE9yZGVyQnlQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShpbnB1dDogYW55W10sIGNvbmZpZz86IGFueSk6IGFueVtdO1xuICB0cmFuc2Zvcm08VD4oaW5wdXQ6IFQsIGNvbmZpZz86IGFueSk6IFQ7XG5cbiAgdHJhbnNmb3JtKGlucHV0OiBhbnksIGNvbmZpZz86IGFueSk6IGFueSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGNvbnN0IG91dCA9IFsuLi5pbnB1dF07XG5cbiAgICAvLyBzb3J0IGJ5IG11bHRpcGxlIHByb3BlcnRpZXNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcpKSB7XG4gICAgICByZXR1cm4gb3V0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgY29uc3QgbCA9IGNvbmZpZy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgY29uc3QgW3Byb3AsIGFzY10gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWdbaV0pO1xuICAgICAgICAgIGNvbnN0IHBvcyA9IE9yZGVyQnlQaXBlLm9yZGVyQ29tcGFyZShwcm9wLCBhc2MsIGEsIGIpO1xuICAgICAgICAgIGlmIChwb3MgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzb3J0IGJ5IGEgc2luZ2xlIHByb3BlcnR5IHZhbHVlXG4gICAgaWYgKGlzU3RyaW5nKGNvbmZpZykpIHtcbiAgICAgIGNvbnN0IFtwcm9wLCBhc2MsIHNpZ25dID0gT3JkZXJCeVBpcGUuZXh0cmFjdEZyb21Db25maWcoY29uZmlnKTtcblxuICAgICAgaWYgKGNvbmZpZy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN3aXRjaC1kZWZhdWx0XG4gICAgICAgIHN3aXRjaCAoc2lnbikge1xuICAgICAgICAgIGNhc2UgJysnOlxuICAgICAgICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLnNpbXBsZVNvcnQuYmluZCh0aGlzKSk7XG4gICAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLm9yZGVyQ29tcGFyZS5iaW5kKHRoaXMsIHByb3AsIGFzYykpO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgc29ydCBieSB2YWx1ZVxuICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgc2ltcGxlU29ydChhOiBhbnksIGI6IGFueSkge1xuICAgIHJldHVybiBpc1N0cmluZyhhKSAmJiBpc1N0cmluZyhiKSA/IGEudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIudG9Mb3dlckNhc2UoKSkgOiBhIC0gYjtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG9yZGVyQ29tcGFyZShwcm9wOiBzdHJpbmcsIGFzYzogYm9vbGVhbiwgYTogYW55LCBiOiBhbnkpIHtcbiAgICBjb25zdCBmaXJzdCA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShhLCBwcm9wKTtcbiAgICBjb25zdCBzZWNvbmQgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkoYiwgcHJvcCk7XG5cbiAgICBpZiAoZmlyc3QgPT09IHNlY29uZCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZpcnN0KSB8fCBmaXJzdCA9PT0gJycpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChzZWNvbmQpIHx8IHNlY29uZCA9PT0gJycpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoZmlyc3QpICYmIGlzU3RyaW5nKHNlY29uZCkpIHtcbiAgICAgIGNvbnN0IHBvcyA9IGZpcnN0LnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShzZWNvbmQudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgIHJldHVybiBhc2MgPyBwb3MgOiAtcG9zO1xuICAgIH1cblxuICAgIHJldHVybiBhc2MgPyBmaXJzdCAtIHNlY29uZCA6IHNlY29uZCAtIGZpcnN0O1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZXh0cmFjdEZyb21Db25maWcoY29uZmlnOiBhbnkpIHtcbiAgICBjb25zdCBzaWduID0gY29uZmlnLnN1YnN0cigwLCAxKTtcbiAgICBjb25zdCBwcm9wID0gY29uZmlnLnJlcGxhY2UoL15bLStdLywgJycpO1xuICAgIGNvbnN0IGFzYyA9IHNpZ24gIT09ICctJztcblxuICAgIHJldHVybiBbcHJvcCwgYXNjLCBzaWduXTtcbiAgfVxufVxuIl19