/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ViewEncapsulation, Input, ViewChild, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
import { BlockUIActions } from '../../constants/block-ui-actions.constant';
import { BlockUIDefaultName } from '../../constants/block-ui-default-name.constant';
import { styles } from './block-ui-content.component.style';
import { template } from './block-ui-content.component.template';
var BlockUIContentComponent = /** @class */ (function () {
    function BlockUIContentComponent(blockUI, resolver, changeDetectionRef) {
        this.blockUI = blockUI;
        this.resolver = resolver;
        this.changeDetectionRef = changeDetectionRef;
        this.name = BlockUIDefaultName;
        this.delayStart = 0;
        this.delayStop = 0;
        this.state = { startTimeout: null, stopTimeout: null, blockCount: 0 };
        this.active = false;
    }
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.settings = this.blockUI.getSettings();
        this.blockUISubscription = this.subscribeToBlockUI(this.blockUI.observe());
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        try {
            if (!this.templateCmp) {
                return false;
            }
            if (this.templateCmp instanceof TemplateRef) {
                this.templateOutlet.createEmbeddedView(this.templateCmp);
            }
            else {
                var /** @type {?} */ templateComp = this.resolver.resolveComponentFactory(this.templateCmp);
                this.templateCompRef = this.templateOutlet.createComponent(templateComp);
                this.updateBlockTemplate(this.message);
            }
        }
        catch (/** @type {?} */ error) {
            console.error('ng-block-ui:', error);
        }
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.changeDetectionRef.detectChanges();
    };
    /**
     * @param {?} blockUI$
     * @return {?}
     */
    BlockUIContentComponent.prototype.subscribeToBlockUI = /**
     * @param {?} blockUI$
     * @return {?}
     */
    function (blockUI$) {
        var _this = this;
        return blockUI$
            .subscribe(function (event) { return _this.onDispatchedEvent(event); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    BlockUIContentComponent.prototype.onDispatchedEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        switch (event.action) {
            case (BlockUIActions.START):
                this.onStart(event);
                break;
            case (BlockUIActions.STOP):
                this.onStop(event);
                break;
            case (BlockUIActions.UPDATE):
                this.onUpdate(event);
                break;
            case (BlockUIActions.RESET):
                this.onReset();
                break;
            case (BlockUIActions.UNSUBSCRIBE):
                this.onStop(event);
                this.onUnsubscribe(event.name);
                break;
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    BlockUIContentComponent.prototype.onStart = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _this = this;
        var name = _a.name, message = _a.message;
        if (name === this.name) {
            var /** @type {?} */ delay = this.delayStart || this.settings.delayStart || 0;
            if (this.state.startTimeout === null) {
                this.state.startTimeout = setTimeout(function () {
                    _this.showBlock(message);
                }, delay);
            }
            this.state.blockCount++;
            this.updateInstanceBlockCount();
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    BlockUIContentComponent.prototype.onStop = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var _this = this;
        var name = _a.name;
        if (name === this.name) {
            if (this.state.blockCount > 1) {
                this.state.blockCount--;
            }
            else {
                if (!this.active) {
                    this.clearState();
                }
                else {
                    var /** @type {?} */ delay = this.delayStop || this.settings.delayStop || 0;
                    if (this.state.stopTimeout === null) {
                        this.state.stopTimeout = setTimeout(function () {
                            _this.hideBlock();
                        }, delay);
                    }
                }
            }
            this.updateInstanceBlockCount();
        }
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.onReset = /**
     * @return {?}
     */
    function () {
        this.hideBlock();
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    BlockUIContentComponent.prototype.onUpdate = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var name = _a.name, message = _a.message;
        if (name === this.name) {
            this.active = true;
            this.message = message || this.defaultMessage || this.settings.message;
            this.updateBlockTemplate(this.message);
            this.changeDetectionRef.detectChanges();
        }
    };
    /**
     * @param {?} message
     * @return {?}
     */
    BlockUIContentComponent.prototype.showBlock = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.active = true;
        this.message = message || this.defaultMessage || this.settings.message;
        this.updateBlockTemplate(this.message);
        this.changeDetectionRef.detectChanges();
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.hideBlock = /**
     * @return {?}
     */
    function () {
        this.clearState();
        this.active = false;
        if (!this.changeDetectionRef['destroyed']) {
            this.changeDetectionRef.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.clearState = /**
     * @return {?}
     */
    function () {
        this.state.startTimeout != null && clearTimeout(this.state.startTimeout);
        this.state.stopTimeout != null && clearTimeout(this.state.stopTimeout);
        this.state.blockCount = 0;
        this.state.startTimeout = null;
        this.state.stopTimeout = null;
        this.updateInstanceBlockCount();
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    BlockUIContentComponent.prototype.updateBlockTemplate = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        if (this.templateCompRef && this.templateCompRef instanceof ComponentRef) {
            this.templateCompRef.instance.message = msg;
        }
    };
    /**
     * @param {?} name
     * @return {?}
     */
    BlockUIContentComponent.prototype.onUnsubscribe = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.blockUISubscription && name === this.name) {
            this.blockUISubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.updateInstanceBlockCount = /**
     * @return {?}
     */
    function () {
        if (this.blockUI.blockUIInstances[this.name]) {
            this.blockUI.blockUIInstances[this.name].blockCount = this.state.blockCount;
        }
    };
    /**
     * @return {?}
     */
    BlockUIContentComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onUnsubscribe(this.name);
    };
    BlockUIContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'block-ui-content',
                    template: template,
                    // TODO: Find how to bundle styles for npm
                    encapsulation: ViewEncapsulation.None,
                    styles: [styles]
                }] }
    ];
    /** @nocollapse */
    BlockUIContentComponent.ctorParameters = function () { return [
        { type: BlockUIInstanceService },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    BlockUIContentComponent.propDecorators = {
        name: [{ type: Input }],
        delayStart: [{ type: Input }],
        delayStop: [{ type: Input }],
        defaultMessage: [{ type: Input, args: ['message',] }],
        templateCmp: [{ type: Input, args: ['template',] }],
        templateOutlet: [{ type: ViewChild, args: ['templateOutlet', { read: ViewContainerRef },] }]
    };
    return BlockUIContentComponent;
}());
export { BlockUIContentComponent };
function BlockUIContentComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    BlockUIContentComponent.prototype.name;
    /** @type {?} */
    BlockUIContentComponent.prototype.delayStart;
    /** @type {?} */
    BlockUIContentComponent.prototype.delayStop;
    /** @type {?} */
    BlockUIContentComponent.prototype.defaultMessage;
    /** @type {?} */
    BlockUIContentComponent.prototype.templateCmp;
    /** @type {?} */
    BlockUIContentComponent.prototype.templateOutlet;
    /** @type {?} */
    BlockUIContentComponent.prototype.state;
    /** @type {?} */
    BlockUIContentComponent.prototype.className;
    /** @type {?} */
    BlockUIContentComponent.prototype.active;
    /** @type {?} */
    BlockUIContentComponent.prototype.templateCompRef;
    /** @type {?} */
    BlockUIContentComponent.prototype.message;
    /** @type {?} */
    BlockUIContentComponent.prototype.blockUISubscription;
    /** @type {?} */
    BlockUIContentComponent.prototype.settings;
    /** @type {?} */
    BlockUIContentComponent.prototype.blockUI;
    /** @type {?} */
    BlockUIContentComponent.prototype.resolver;
    /** @type {?} */
    BlockUIContentComponent.prototype.changeDetectionRef;
}

//# sourceMappingURL=data:application/json;base64,